openapi: 3.0.3
info:
  title: Flow Plus Smart API doc
  description: |-
    # Overview
    Qi Digital is a blockchain focused technology company. We provide a suite of blockchain connected APIs for PSPs, Gateways and FinTechs.
    The Smart API is a fully hosted crypto payment processing solution and can be integrated with minimal effort.
    # Merchant Wallet
    All merchants are required to have an active crypto ‘receiving’ wallet. This can be with any third-party provider.
    If a merchant does not have a crypto wallet, our partners can create one as part of their onboarding process.
    # PSP / Gateway Wallet
    Integrated partners may wish to have an omnibus wallet, where they collect all crypto funds on behalf of their merchant customers. There may be regulatory requirements for this service and Partners are advised to seek additional advice when holding client funds as these may differ to 'e-money' licensing.
    
  termsOfService: https://qidigital.com/terms/
  contact:
    email: connect@qidigital.com
  version: 1.0.2
servers:
  - url: https://{serverName}.qigateway.net
    variables:
      serverName:
        default: servername
        description: serverName assigned by the service provider
paths:
  /v1/merchant:
    post:
      tags:
        - Merchant
      summary: Create a new Merchant
      description: Add a new Merchant
      operationId: addMerchant
      requestBody:
        description: Create a new Merchant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Merchant'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
        '400':
          description: Bad request if any validation error
      security:
        - BearerAuth: []
  /v1/merchant/{merchantId}:
    parameters:
      - name: merchantId
        in: path
        description: Merchant Id
        required: true
        schema:
          type: string
    get:
      tags:
        - Merchant
      summary: Get merchant details
      description: Get Merchant details
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'          
        '400':
          description: Bad request or Invalid Merchant Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
      security:
        - BearerAuth:
            - write:pets
            - read:pets
    put:
      tags:
        - Merchant
      summary: Update an existing merchant
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Merchant'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'          
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
        '405':
          description: Method not allowed
      security:
        - BearerAuth:
            - write:pets
            - read:pets
    patch:
      tags:
        - Merchant
      summary: Update Merchant Status
      description: Change merchant status to active and inactive
      requestBody:
        description: Merchant status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'          
        '400':
          description: Bad request or Invalid Merchant Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
      security:
        - BearerAuth:
            - write:pets
            - read:pets
  /v1/transaction:
    post:
      tags:
        - Transaction
      summary: Create a new Paymentlink
      description: Add a new Merchant
      operationId: addTransaction
      requestBody:
        description: Create a new transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Bad request if any validation error
      security:
        - BearerAuth:
            - write:pets
            - read:pets
  /v1/transaction/{transactionId}:
    get:
      parameters:
        - name: transactionId
          in: path
          description: Transaction Id
          required: true
          schema:
            type: string
      tags:
        - Transaction
      summary: Get Transaction details
      description: Get Transaction details
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'          
        '400':
          description: Bad request or Invalid Merchant Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
      security:
        - BearerAuth:
            - write:pets
            - read:pets
  /v1/webhook:
    post:
      tags:
        - Webhook
      summary: Create a new Webhook
      description: One global webhook (without merchantId) and webhook for each merchantId can be configured.
      operationId: addWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Bad request if any validation error
      security:
        - BearerAuth: []
  /v1/webhook/{webhookId}:
    get:
      parameters:
        - name: webhookId
          in: path
          description: WebhookId Id
          required: true
          schema:
            type: string
      tags:
        - Webhook
      summary: Get Webhook details
      description: Get Webhook details
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'          
        '400':
          description: Bad request or Invalid Webhook Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
      security:
        - BearerAuth: []
components:
  schemas:
    Merchant:
      type: object
      properties:
        name:
          type: string
          example: John Doe Ltd
        website:
          type: string
          example: https://merchantwebsite.com
        contact:
          type: object
          properties:
            name:
              type: string
              example: John Doe 
            email:
              type: string
              example: john.doe@gmail.com 
            phone:
              type: string
              example: +1-232-33-232
        active:
          type: boolean
          example: true
    Transaction:
      type: object
      required:
        - merchantId
        - type
        - amount
        - returnUrl
        - referenceId
      properties:
        merchantId:
          type: string
          example: m_63164838383
        type:
          type: string
          example: fiatToCrypto
          enum: [fiatToCrypto]
        amount:
          type: object
          required:
            - value
            - currency
          properties:
            value:
              type: number
              example: 20.5
            currency:
              type: string
              example: USD
              enum: [USD,EUR,GBP]
        customer:
          type: object
          required:
            - name
            - email
          properties:
            name:
              type: string
              example: John Doe 
            email:
              type: string
              example: john.doe@gmail.com
        returnUrl:
          type: string
          example: https://your-gateway.com/url
        referenceId:
          type: string
          example: tx373838383
    TransactionResponse:
      type: object
      properties:
        id:
          type: string
          example: tx_631a500a28a22
        merchantId:
          type: string
          example: m_63164838383
        type:
          type: string
          example: fiatToCrypto
        amount:
          type: object
          properties:
            value:
              type: number
              example: 20.5
            currency:
              type: string
              example: USD
              enum: [USD,EUR,GBP]
        customer:
          type: object
          properties:
            name:
              type: string
              example: John Doe 
            email:
              type: string
              example: john.doe@gmail.com
        returnUrl:
          type: string
          example: https://your-gateway.com/url
        referenceId:
          type: string
          example: tx373838383
        status:
          type: string
          enum: [created,pending,unconfirmed,confirmed]
        createdAt:
          type: number
          example: 1662668810
        hash:
          type: string
          description: Transaction Hash
        gatewayUrl:
          type: string
          description: Gateway URL to accept crypto
    Webhook:
      required:
        - object
        - events
        - url
      type: object
      properties:
        object:
          type: string
          example: transacition
        merchantId:
          type: string
          example: m_631343434
        events:
          type: array
          items:
            type: string
            enum: [
              transaction.created,
              transaction.processed,
              transaction.cancelled,
              transaction.unconfirmed,
              transaction.confirmed
            ]
            example: "transaction.created,transaction.confirmed"
        url:
          type: string
          example: https://yourdomain.com/webhook/callback
    Status:
      type: object
      required:
        - active
      properties:
        active:
          type: boolean
          example: false
    Errors:
      type: array
      items:
        $ref: '#/components/schemas/Error'
    Error:
      type: object
      properties:
        keyword:
          type: string
          example: invalid
        pointer:
          type: string
          example: transactionId
        message:
          type: string
          example: The attribute is invalid
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Merchant'
        application/xml:
          schema:
            $ref: '#/components/schemas/Merchant'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Merchant'
  securitySchemes:
    BearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
